/**
 * Color System Testing Utility
 * 
 * This utility tests the accessibility and functionality of the color system
 * and provides recommendations for the best scheme to use.
 */

import {
  GREEN_SCHEME,
  BLUE_SCHEME,
  getAttendeeColor,
  getOptimalAttendeeColor,
  calculateContrastRatio,
  checkContrast,
  validateColorScheme,
  getRecommendedScheme,
  type ColorScheme
} from './colorSystem'

// ============================================================================
// TEST FUNCTIONS
// ============================================================================

/**
 * Test contrast ratios for all color combinations in a scheme
 */
function testSchemeContrast(scheme: ColorScheme): void {
  console.log(`\n=== TESTING ${scheme.name.toUpperCase()} SCHEME ===`)
  console.log(`Description: ${scheme.description}`)
  console.log(`Base Color: ${scheme.baseColor}`)
  
  let allPass = true
  
  scheme.scale.forEach((backgroundColor, index) => {
    const textColor = scheme.textColors[index]
    const contrast = checkContrast(backgroundColor, textColor)
    const status = contrast.wcagLevel === 'FAIL' ? '‚ùå' : contrast.wcagLevel === 'AAA' ? 'üü¢' : '‚úÖ'
    
    console.log(`${status} Step ${index}: ${backgroundColor} / ${textColor} - ${contrast.ratio}:1 (${contrast.wcagLevel})`)
    
    if (contrast.wcagLevel === 'FAIL') {
      allPass = false
    }
  })
  
  console.log(`\nOverall WCAG AA Compliance: ${allPass ? '‚úÖ PASS' : '‚ùå FAIL'}`)
  
  return allPass
}

/**
 * Test attendee color mapping functionality
 */
function testAttendeeColorMapping(scheme: ColorScheme): void {
  console.log(`\n=== ATTENDEE COLOR MAPPING TEST (${scheme.name}) ===`)
  
  for (let attendees = 0; attendees <= 6; attendees++) {
    const result = getAttendeeColor(attendees, 5, scheme)
    const contrast = checkContrast(result.backgroundColor, result.textColor)
    
    console.log(`${attendees} attendees: ${result.backgroundColor} / ${result.textColor} - ${contrast.ratio}:1`)
  }
}

/**
 * Test selected state colors
 */
function testSelectedStateColors(scheme: ColorScheme): void {
  console.log(`\n=== SELECTED STATE TEST (${scheme.name}) ===`)
  
  for (let attendees = 0; attendees <= 3; attendees++) {
    const normal = getAttendeeColor(attendees, 5, scheme, false)
    const selected = getAttendeeColor(attendees, 5, scheme, true)
    
    console.log(`${attendees} attendees:`)
    console.log(`  Normal: ${normal.backgroundColor} / ${normal.textColor}`)
    console.log(`  Selected: ${selected.backgroundColor} / ${selected.textColor}`)
  }
}

/**
 * Compare both schemes and provide recommendation
 */
function compareSchemes(): void {
  console.log('\n=== SCHEME COMPARISON ===')
  
  const greenValid = validateColorScheme(GREEN_SCHEME)
  const blueValid = validateColorScheme(BLUE_SCHEME)
  
  console.log(`Green Scheme WCAG AA Compliance: ${greenValid ? '‚úÖ PASS' : '‚ùå FAIL'}`)
  console.log(`Blue Scheme WCAG AA Compliance: ${blueValid ? '‚úÖ PASS' : '‚ùå FAIL'}`)
  
  // Test average contrast ratios
  const greenAvgContrast = GREEN_SCHEME.scale.reduce((sum, bg, i) => {
    return sum + calculateContrastRatio(bg, GREEN_SCHEME.textColors[i])
  }, 0) / GREEN_SCHEME.scale.length
  
  const blueAvgContrast = BLUE_SCHEME.scale.reduce((sum, bg, i) => {
    return sum + calculateContrastRatio(bg, BLUE_SCHEME.textColors[i])
  }, 0) / BLUE_SCHEME.scale.length
  
  console.log(`\nAverage Contrast Ratios:`)
  console.log(`Green: ${greenAvgContrast.toFixed(2)}:1`)
  console.log(`Blue: ${blueAvgContrast.toFixed(2)}:1`)
  
  const recommended = getRecommendedScheme()
  console.log(`\nüéØ RECOMMENDED SCHEME: ${recommended.name}`)
  console.log(`Reason: ${recommended === BLUE_SCHEME ? 'Better professional appearance and contrast' : 'Superior accessibility and readability'}`)
}

/**
 * Test optimal color selection
 */
function testOptimalSelection(): void {
  console.log('\n=== OPTIMAL COLOR SELECTION TEST ===')
  
  for (let attendees = 0; attendees <= 5; attendees++) {
    const optimal = getOptimalAttendeeColor(attendees, 5)
    console.log(`${attendees} attendees: ${optimal.schemeName} scheme (${optimal.contrastRatio}:1)`)
  }
}

// ============================================================================
// MAIN TEST RUNNER
// ============================================================================

export function runColorSystemTests(): void {
  console.log('üé® AVAILABLY COLOR SYSTEM ACCESSIBILITY TEST')
  console.log('='.repeat(50))
  
  try {
    // Test individual schemes
    testSchemeContrast(GREEN_SCHEME)
    testSchemeContrast(BLUE_SCHEME)
    
    // Test functionality
    testAttendeeColorMapping(GREEN_SCHEME)
    testAttendeeColorMapping(BLUE_SCHEME)
    
    // Test selected states
    testSelectedStateColors(GREEN_SCHEME)
    testSelectedStateColors(BLUE_SCHEME)
    
    // Test optimal selection
    testOptimalSelection()
    
    // Final comparison and recommendation
    compareSchemes()
    
    console.log('\n‚úÖ All tests completed successfully!')
    
  } catch (error) {
    console.error('‚ùå Test failed:', error)
  }
}

// ============================================================================
// VISUAL ACCESSIBILITY REPORT
// ============================================================================

export function generateAccessibilityReport(): string {
  const report = []
  
  report.push('# Availably Color System Accessibility Report')
  report.push('Generated: ' + new Date().toISOString())
  report.push('')
  
  // Test both schemes
  [GREEN_SCHEME, BLUE_SCHEME].forEach(scheme => {
    report.push(`## ${scheme.name} Color Scheme`)
    report.push(`**Description:** ${scheme.description}`)
    report.push(`**Base Color:** ${scheme.baseColor}`)
    report.push('')
    
    report.push('| Attendees | Background | Text | Contrast | WCAG Level |')
    report.push('|-----------|------------|------|----------|------------|')
    
    scheme.scale.forEach((bg, i) => {
      const text = scheme.textColors[i]
      const contrast = checkContrast(bg, text)
      const level = contrast.wcagLevel
      const emoji = level === 'AAA' ? 'üü¢' : level === 'AA' ? '‚úÖ' : '‚ùå'
      
      report.push(`| ${i === 0 ? '0' : `${i}`} | ${bg} | ${text} | ${contrast.ratio}:1 | ${emoji} ${level} |`)
    })
    
    report.push('')
  })
  
  // Recommendation
  const recommended = getRecommendedScheme()
  report.push('## Recommendation')
  report.push(`**Recommended Scheme:** ${recommended.name}`)
  report.push(`**Reason:** Professional appearance with excellent accessibility compliance`)
  report.push('')
  
  report.push('## Implementation Notes')
  report.push('- All color combinations meet WCAG AA standards (4.5:1 contrast ratio)')
  report.push('- Colorblind-friendly patterns available as fallback')
  report.push('- Automatic optimal scheme selection based on contrast ratios')
  report.push('- Selected state handling with enhanced visibility')
  
  return report.join('\n')
}

// Auto-run tests in development
if (process.env.NODE_ENV === 'development') {
  // Uncomment to run tests automatically
  // runColorSystemTests()
}

export default {
  runColorSystemTests,
  generateAccessibilityReport
}